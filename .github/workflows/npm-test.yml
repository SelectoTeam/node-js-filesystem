name: build

on:
  push:
  pull_request:

jobs:
  test:
    name: Test on node ${{ matrix.node }} and ${{ matrix.os }}
    environment: deploy
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node: [12.x, 14.x, 16.x]
        os: [ubuntu-latest, windows-latest, macOS-latest]
    
    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node }}

    - name: install global dependence
      run: |
        npm install yarn codecov -g

    - name: Cache Node Dependencies
      id: cache
      uses: actions/cache@v1
      with:
        path: node_modules
        key: ${{runner.OS}}-npm-caches-${{ hashFiles('yarn.lock') }}

    - name: install dependence
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        yarn --ignore-engines

    - name: npm install, build and test
      env:
        REMOTE_FILESYSTEM_ROOT_DIR: filesystem/test/root/dir-${{matrix.os}}-${{matrix.node}}
        ALI_ACCESS_KEY_ID: ${{ secrets.ALI_ACCESS_KEY_ID }}
        ALI_ACCESS_KEY_SECERT: ${{ secrets.ALI_ACCESS_KEY_SECERT }}
        ALI_OSS_BUCKET: ${{ secrets.ALI_OSS_BUCKET }}
        ALI_OSS_ENDPOINT: ${{ secrets.ALI_OSS_ENDPOINT }}
        ALI_OSS_ORIGIN: ${{ secrets.ALI_OSS_ORIGIN }}
        ALI_OSS_URL: ${{ secrets.ALI_OSS_URL }}
        FTP_HOST: ${{ secrets.FTP_HOST }}
        FTP_PORT: ${{ secrets.FTP_PORT }}
        FTP_USER: ${{ secrets.FTP_USER }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        NPM_EMAIL: ${{ secrets.NPM_EMAIL }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        yarn coverage

    - name: upload coverage
      if: ${{ success() && contains(matrix.os, 'Ubuntu') && contains(matrix.node, '12.') }}
      run: |
        codecov -f .nyc_output/*.json

    - name: build package
      if: ${{ success() && contains(matrix.os, 'Ubuntu') && contains(matrix.node, '12.') }}
      run: yarn build
